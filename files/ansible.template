{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Create a VPC with one public subnet and one private subnet. The Public subnet consists of two",

  "Parameters" : {
    "KeyName" : {
    "Description" : "Name of existing key to use for ssh in ec2 instances",
    "Type" : "String",
    "Default" : "staticsitestack",
    "AllowedPattern" : "[a-zA-Z]*",
    "ConstraintDescription" : "Must be string of characters only"

  },
  "EC2InstanceType" : {
    "Description" : "WebServer EC2 instance type",
    "Type" : "String",
    "Default" : "t2.micro",
    "AllowedValues" : [ "t2.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
    "ConstraintDescription" : "Make sure InstanceType is a valid EC2 instance type."
  }
  },

  "Resources" : {

    "CustomRole": {
       "Type": "AWS::IAM::Role",
       "Properties": {
          "AssumeRolePolicyDocument": {
             "Version" : "2012-10-17",
             "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                   "Service": [ "ec2.amazonaws.com" ]
                },
                "Action": [ "sts:AssumeRole" ]
             } ]
          },
          "Path": "/",
          "Policies": [ {
             "PolicyName": "custom",
             "PolicyDocument": {
                "Version" : "2012-10-17",
                "Statement": [ {
                   "Effect": "Allow",
                   "Action": "ec2:*",
                   "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "cloudformation:*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "rds:*",
                  "Resource": "*"
                }
               ]
             }
             } ]
          }
    },
    "CustomInstanceProfile": {
       "Type": "AWS::IAM::InstanceProfile",
       "Properties": {
          "Path": "/",
          "Roles": [ {
             "Ref": "CustomRole"
          } ]
       }
    },
    "AnsibleServerSecGrp": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH and HTTP access",
        "SecurityGroupIngress": [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "158.222.173.241/0"}
          ],
          "Tags":[ {"Key" : "Name", "Value" : "AnsibleServer Security Group" },
                  {"Key" : "CF-Stack Name", "Value" : {"Ref" : "AWS::StackName"} }
              ]
        }
    },
    "AnsibleServer": {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config": {
            "packages": {
              "yum" : {
                  "git" : [],
                  "epel-release" : [],
                  "wget" : []
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : "ami-c58c1dd3",
        "InstanceType"   : { "Ref" : "EC2InstanceType" },
        "IamInstanceProfile" : {"Ref" : "CustomInstanceProfile"},
        "AvailabilityZone": "us-east-1a",
        "SecurityGroups" : [ {"Ref" : "AnsibleServerSecGrp"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"         : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "yum update -y aws-cfn-bootstrap\n",
          "yum --enablerepo=epel install -y ansible\n",
          "wget -N https://gist.githubusercontent.com/ajinkyakadam/c1be5efb1616515526066824db651818/raw/5a2901032682c178a03ac87a8ec0ba868e77dc99/hosts -O /etc/ansible/hosts\n",
          "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource AnsibleServer ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",
          "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "WaitHandle" }, "'\n",
          "git clone https://github.com/ajinkyakadam/deploy-wordpress-aws.git\n",
          "cd deploy-wordpress-aws\n" ,
          "ansible-playbook -i /etc/ansible/hosts deploy-wp.yml --verbose\n"
        ]]}},
        "Tags": [ {"Key" : "Name", "Value" : "AnsibleServer" }]
      }
    },
        "WaitHandle" : {
          "Type" : "AWS::CloudFormation::WaitConditionHandle"
        },
        "WaitCondition" : {
          "Type" : "AWS::CloudFormation::WaitCondition",
          "DependsOn" : "AnsibleServer",
          "Properties" : {
            "Handle" : {"Ref" : "WaitHandle"},
            "Timeout" : "600"
          }
        }
  },
    "Outputs" : {
      "AnsibleServerIp": {
        "Value" : {"Fn::GetAtt" : [ "AnsibleServer", "PublicIp"]},
        "Description" : "Ansible Server Public IP"
      }
    }
  }
